// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: ocr.proto

package pbs

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bt []byte `protobuf:"bytes,1,opt,name=bt,proto3" json:"bt,omitempty"`
}

func (x *VideoBytes) Reset() {
	*x = VideoBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoBytes) ProtoMessage() {}

func (x *VideoBytes) ProtoReflect() protoreflect.Message {
	mi := &file_ocr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoBytes.ProtoReflect.Descriptor instead.
func (*VideoBytes) Descriptor() ([]byte, []int) {
	return file_ocr_proto_rawDescGZIP(), []int{0}
}

func (x *VideoBytes) GetBt() []byte {
	if x != nil {
		return x.Bt
	}
	return nil
}

type VideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video *VideoBytes `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"` //视频文件
}

func (x *VideoRequest) Reset() {
	*x = VideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoRequest) ProtoMessage() {}

func (x *VideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoRequest.ProtoReflect.Descriptor instead.
func (*VideoRequest) Descriptor() ([]byte, []int) {
	return file_ocr_proto_rawDescGZIP(), []int{1}
}

func (x *VideoRequest) GetVideo() *VideoBytes {
	if x != nil {
		return x.Video
	}
	return nil
}

type VideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"` //字幕
}

func (x *VideoResponse) Reset() {
	*x = VideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoResponse) ProtoMessage() {}

func (x *VideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoResponse.ProtoReflect.Descriptor instead.
func (*VideoResponse) Descriptor() ([]byte, []int) {
	return file_ocr_proto_rawDescGZIP(), []int{2}
}

func (x *VideoResponse) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

var File_ocr_proto protoreflect.FileDescriptor

var file_ocr_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x63, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x62, 0x73,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c,
	0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x62, 0x74, 0x22, 0x35, 0x0a, 0x0c,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x22, 0x23, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x32, 0xd1, 0x03, 0x0a, 0x0a, 0x4f, 0x43, 0x52,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x73, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x63, 0x72, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x79, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11,
	0x2e, 0x70, 0x62, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x63, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x3a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x73, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70,
	0x62, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x63,
	0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x28, 0x01, 0x12, 0x73, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x57, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x11, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22,
	0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x63, 0x72, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x3a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x28, 0x01, 0x30, 0x01, 0x42, 0x08, 0x5a, 0x06,
	0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocr_proto_rawDescOnce sync.Once
	file_ocr_proto_rawDescData = file_ocr_proto_rawDesc
)

func file_ocr_proto_rawDescGZIP() []byte {
	file_ocr_proto_rawDescOnce.Do(func() {
		file_ocr_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocr_proto_rawDescData)
	})
	return file_ocr_proto_rawDescData
}

var file_ocr_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ocr_proto_goTypes = []interface{}{
	(*VideoBytes)(nil),    // 0: pbs.VideoBytes
	(*VideoRequest)(nil),  // 1: pbs.VideoRequest
	(*VideoResponse)(nil), // 2: pbs.VideoResponse
}
var file_ocr_proto_depIdxs = []int32{
	0, // 0: pbs.VideoRequest.video:type_name -> pbs.VideoBytes
	1, // 1: pbs.OCRService.Recognition:input_type -> pbs.VideoRequest
	1, // 2: pbs.OCRService.RecognitionByServerStream:input_type -> pbs.VideoRequest
	1, // 3: pbs.OCRService.RecognitionByClientStream:input_type -> pbs.VideoRequest
	1, // 4: pbs.OCRService.RecognitionByTWStream:input_type -> pbs.VideoRequest
	2, // 5: pbs.OCRService.Recognition:output_type -> pbs.VideoResponse
	2, // 6: pbs.OCRService.RecognitionByServerStream:output_type -> pbs.VideoResponse
	2, // 7: pbs.OCRService.RecognitionByClientStream:output_type -> pbs.VideoResponse
	2, // 8: pbs.OCRService.RecognitionByTWStream:output_type -> pbs.VideoResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ocr_proto_init() }
func file_ocr_proto_init() {
	if File_ocr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ocr_proto_goTypes,
		DependencyIndexes: file_ocr_proto_depIdxs,
		MessageInfos:      file_ocr_proto_msgTypes,
	}.Build()
	File_ocr_proto = out.File
	file_ocr_proto_rawDesc = nil
	file_ocr_proto_goTypes = nil
	file_ocr_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OCRServiceClient is the client API for OCRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OCRServiceClient interface {
	Recognition(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoResponse, error)
	RecognitionByServerStream(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (OCRService_RecognitionByServerStreamClient, error)
	RecognitionByClientStream(ctx context.Context, opts ...grpc.CallOption) (OCRService_RecognitionByClientStreamClient, error)
	RecognitionByTWStream(ctx context.Context, opts ...grpc.CallOption) (OCRService_RecognitionByTWStreamClient, error)
}

type oCRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOCRServiceClient(cc grpc.ClientConnInterface) OCRServiceClient {
	return &oCRServiceClient{cc}
}

func (c *oCRServiceClient) Recognition(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoResponse, error) {
	out := new(VideoResponse)
	err := c.cc.Invoke(ctx, "/pbs.OCRService/Recognition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCRServiceClient) RecognitionByServerStream(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (OCRService_RecognitionByServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OCRService_serviceDesc.Streams[0], "/pbs.OCRService/RecognitionByServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &oCRServiceRecognitionByServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OCRService_RecognitionByServerStreamClient interface {
	Recv() (*VideoResponse, error)
	grpc.ClientStream
}

type oCRServiceRecognitionByServerStreamClient struct {
	grpc.ClientStream
}

func (x *oCRServiceRecognitionByServerStreamClient) Recv() (*VideoResponse, error) {
	m := new(VideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oCRServiceClient) RecognitionByClientStream(ctx context.Context, opts ...grpc.CallOption) (OCRService_RecognitionByClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OCRService_serviceDesc.Streams[1], "/pbs.OCRService/RecognitionByClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &oCRServiceRecognitionByClientStreamClient{stream}
	return x, nil
}

type OCRService_RecognitionByClientStreamClient interface {
	Send(*VideoRequest) error
	CloseAndRecv() (*VideoResponse, error)
	grpc.ClientStream
}

type oCRServiceRecognitionByClientStreamClient struct {
	grpc.ClientStream
}

func (x *oCRServiceRecognitionByClientStreamClient) Send(m *VideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oCRServiceRecognitionByClientStreamClient) CloseAndRecv() (*VideoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oCRServiceClient) RecognitionByTWStream(ctx context.Context, opts ...grpc.CallOption) (OCRService_RecognitionByTWStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OCRService_serviceDesc.Streams[2], "/pbs.OCRService/RecognitionByTWStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &oCRServiceRecognitionByTWStreamClient{stream}
	return x, nil
}

type OCRService_RecognitionByTWStreamClient interface {
	Send(*VideoRequest) error
	Recv() (*VideoResponse, error)
	grpc.ClientStream
}

type oCRServiceRecognitionByTWStreamClient struct {
	grpc.ClientStream
}

func (x *oCRServiceRecognitionByTWStreamClient) Send(m *VideoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oCRServiceRecognitionByTWStreamClient) Recv() (*VideoResponse, error) {
	m := new(VideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OCRServiceServer is the server API for OCRService service.
type OCRServiceServer interface {
	Recognition(context.Context, *VideoRequest) (*VideoResponse, error)
	RecognitionByServerStream(*VideoRequest, OCRService_RecognitionByServerStreamServer) error
	RecognitionByClientStream(OCRService_RecognitionByClientStreamServer) error
	RecognitionByTWStream(OCRService_RecognitionByTWStreamServer) error
}

// UnimplementedOCRServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOCRServiceServer struct {
}

func (*UnimplementedOCRServiceServer) Recognition(context.Context, *VideoRequest) (*VideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognition not implemented")
}
func (*UnimplementedOCRServiceServer) RecognitionByServerStream(*VideoRequest, OCRService_RecognitionByServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RecognitionByServerStream not implemented")
}
func (*UnimplementedOCRServiceServer) RecognitionByClientStream(OCRService_RecognitionByClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RecognitionByClientStream not implemented")
}
func (*UnimplementedOCRServiceServer) RecognitionByTWStream(OCRService_RecognitionByTWStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RecognitionByTWStream not implemented")
}

func RegisterOCRServiceServer(s *grpc.Server, srv OCRServiceServer) {
	s.RegisterService(&_OCRService_serviceDesc, srv)
}

func _OCRService_Recognition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCRServiceServer).Recognition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.OCRService/Recognition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCRServiceServer).Recognition(ctx, req.(*VideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCRService_RecognitionByServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OCRServiceServer).RecognitionByServerStream(m, &oCRServiceRecognitionByServerStreamServer{stream})
}

type OCRService_RecognitionByServerStreamServer interface {
	Send(*VideoResponse) error
	grpc.ServerStream
}

type oCRServiceRecognitionByServerStreamServer struct {
	grpc.ServerStream
}

func (x *oCRServiceRecognitionByServerStreamServer) Send(m *VideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OCRService_RecognitionByClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OCRServiceServer).RecognitionByClientStream(&oCRServiceRecognitionByClientStreamServer{stream})
}

type OCRService_RecognitionByClientStreamServer interface {
	SendAndClose(*VideoResponse) error
	Recv() (*VideoRequest, error)
	grpc.ServerStream
}

type oCRServiceRecognitionByClientStreamServer struct {
	grpc.ServerStream
}

func (x *oCRServiceRecognitionByClientStreamServer) SendAndClose(m *VideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oCRServiceRecognitionByClientStreamServer) Recv() (*VideoRequest, error) {
	m := new(VideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OCRService_RecognitionByTWStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OCRServiceServer).RecognitionByTWStream(&oCRServiceRecognitionByTWStreamServer{stream})
}

type OCRService_RecognitionByTWStreamServer interface {
	Send(*VideoResponse) error
	Recv() (*VideoRequest, error)
	grpc.ServerStream
}

type oCRServiceRecognitionByTWStreamServer struct {
	grpc.ServerStream
}

func (x *oCRServiceRecognitionByTWStreamServer) Send(m *VideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oCRServiceRecognitionByTWStreamServer) Recv() (*VideoRequest, error) {
	m := new(VideoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OCRService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.OCRService",
	HandlerType: (*OCRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognition",
			Handler:    _OCRService_Recognition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecognitionByServerStream",
			Handler:       _OCRService_RecognitionByServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecognitionByClientStream",
			Handler:       _OCRService_RecognitionByClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RecognitionByTWStream",
			Handler:       _OCRService_RecognitionByTWStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ocr.proto",
}
